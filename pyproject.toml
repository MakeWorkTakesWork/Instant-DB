[build-system]
requires = ["hatchling>=1.8.0"]
build-backend = "hatchling.build"

[project]
name = "instant-db"
version = "1.1.0"
description = "Transform documents into searchable RAG databases in minutes"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Instant-DB Contributors" },
]
maintainers = [
    { name = "Instant-DB Contributors" },
]
keywords = [
    "rag",
    "vector-database", 
    "semantic-search",
    "document-processing",
    "ai",
    "nlp",
    "embeddings",
    "knowledge-base",
    "chatbot",
    "llm",
    "graph-memory"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology", 
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: General",
    "Topic :: Database :: Database Engines/Servers",
]
requires-python = ">=3.8"
dependencies = [
    "sentence-transformers>=2.2.2",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    
    # File type detection
    "python-magic>=0.4.27",
    
    # Graph memory dependencies
    "networkx>=3.0",
    "spacy>=3.4.0",

    # Vector database options
    "chromadb>=0.4.15",
    "faiss-cpu>=1.7.4",
    # sqlite3 is built into Python

    # Optional: OpenAI embeddings
    "openai>=1.0.0",

    # Web server for API
    "flask>=2.3.0",
    "flask-cors>=4.0.0",

    # Utilities
    "tqdm>=4.65.0",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "click>=8.0.0",
]
dynamic = []

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0", 
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "twine>=4.0.0",
    "build>=0.10.0",
]
document-processing = [
    "PyPDF2>=3.0.0",
    "python-docx>=0.8.11", 
    "beautifulsoup4>=4.12.0",
    "spacy>=3.4.0",
]
cloud = [
    "pinecone-client>=2.2.4",
    "weaviate-client>=3.24.0", 
    "qdrant-client>=1.6.0",
]
performance = [
    "psutil>=5.9.0",
    "ujson>=5.7.0",
]
all = [
    "instant-db[dev,document-processing,cloud,performance]"
]

[project.urls]
Homepage = "https://github.com/MakeWorkTakesWork/Instant-DB"
Documentation = "https://github.com/MakeWorkTakesWork/Instant-DB/docs"
Repository = "https://github.com/MakeWorkTakesWork/Instant-DB.git"
"Bug Reports" = "https://github.com/MakeWorkTakesWork/Instant-DB/issues"
Changelog = "https://github.com/MakeWorkTakesWork/Instant-DB/blob/main/CHANGELOG.md"

[project.scripts]
instant-db = "instant_db.cli:main"
instadb = "instant_db.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["instant_db"]

[tool.hatch.build.targets.sdist]
include = [
    "/instant_db",
    "/README.md",
    "/LICENSE", 
    "/requirements.txt",
    "/examples",
]
exclude = [
    "/.github",
    "/tests",
    "/.gitignore",
    "/.pre-commit-config.yaml",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=instant_db",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
branch = true
source = ["instant_db"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude specific directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # Whitespace before ':'
    "E266",  # Too many leading '#' for block comment
    "E501",  # Line too long (handled by black)
    "W503",  # Line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
    "*.egg-info",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "faiss.*",
    "sentence_transformers.*",
    "openai.*",
    "networkx.*",
    "flask.*",
    "flask_cors.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # Line too long (handled by black)
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # Function is too complex
]
unfixable = [
    "F841",  # Unused variables
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["B011"]      # Allow assert False in tests 